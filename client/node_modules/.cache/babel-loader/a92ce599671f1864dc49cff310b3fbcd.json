{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0422\\u0435\\u043C\\u0438\\u0440\\u043B\\u0430\\u043D\\\\Desktop\\\\tests\\\\client\\\\src\\\\pages\\\\ParssTetsCard\\\\PassTestCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport TestCard from \"../../components/TestCard/TestCard.js\";\nimport { useParams } from \"react-router-dom\";\nimport ResCard from \"../resCard/ResCard.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PassTestCard = () => {\n  _s();\n\n  const [test, setTest] = useState([]);\n  const [result, setResult] = useState([]);\n  const [questions, setQuestions] = useState([]);\n  const [show, setShow] = useState(false);\n  const {\n    name\n  } = useParams();\n  useEffect(() => {\n    axios(`/api/tests/get-test/${name}`).then(_ref => {\n      let {\n        data\n      } = _ref;\n      setTest(data);\n    });\n  }, []);\n\n  const chooseAnswer = (e, quest) => {\n    const filtered = questions.filter(it => it.id !== quest.id);\n    const questAns = {\n      id: quest.id,\n      userAnswer: e.target.value\n    };\n    setQuestions([...filtered, questAns]);\n  };\n\n  const finishTest = () => {\n    if (test.length === questions.length) {\n      axios.post(`/api/tests/check-test/${name}`, questions).then(_ref2 => {\n        let {\n          data\n        } = _ref2;\n        setResult(data);\n        setShow(!show);\n      });\n    } else {\n      alert(\"Check all questions\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !show ? /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bg-brown\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: test === null || test === void 0 ? void 0 : test.map(quest => {\n            return /*#__PURE__*/_jsxDEV(TestCard, {\n              test: quest,\n              chooseAnswer: chooseAnswer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 41\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-secondary btn\",\n          onClick: finishTest,\n          children: \"Finish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(ResCard, {\n      questions: questions,\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 30\n    }, this)\n  }, void 0, false);\n};\n\n_s(PassTestCard, \"q7YsIoMhZg+eWUbnSwDStE5q+Fw=\", false, function () {\n  return [useParams];\n});\n\n_c = PassTestCard;\nexport default PassTestCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PassTestCard\");","map":{"version":3,"sources":["C:/Users/Темирлан/Desktop/tests/client/src/pages/ParssTetsCard/PassTestCard.js"],"names":["React","useEffect","useState","axios","TestCard","useParams","ResCard","PassTestCard","test","setTest","result","setResult","questions","setQuestions","show","setShow","name","then","data","chooseAnswer","e","quest","filtered","filter","it","id","questAns","userAnswer","target","value","finishTest","length","post","alert","map"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport TestCard from \"../../components/TestCard/TestCard.js\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport ResCard from \"../resCard/ResCard.js\";\r\n\r\n\r\nconst PassTestCard = () => {\r\n    const [test, setTest] = useState([])\r\n    const [result, setResult] = useState([])\r\n    const [questions, setQuestions] = useState([])\r\n    const [show, setShow] = useState(false)\r\n    const {name} = useParams()\r\n\r\n    useEffect(() => {\r\n        axios(`/api/tests/get-test/${name}`).then(({data}) => {\r\n            setTest(data)\r\n        })\r\n    },[])\r\n\r\n\r\n\r\n    const chooseAnswer = (e, quest) =>{\r\n        const filtered = questions.filter(it => it.id !== quest.id)\r\n        const questAns = {\r\n            id: quest.id,\r\n            userAnswer: e.target.value\r\n        }\r\n        setQuestions([...filtered, questAns])\r\n    }\r\n\r\n\r\n\r\n    const finishTest = () => {\r\n        if(test.length === questions.length) {\r\n            axios.post(`/api/tests/check-test/${name}`, questions )\r\n                .then(({data}) => {\r\n                    setResult(data)\r\n                    setShow(!show)\r\n                })\r\n\r\n        }\r\n        else {\r\n            alert(\"Check all questions\")\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !show ? <section className=\"bg-brown\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            {\r\n                                test?.map(quest => {\r\n                                    return (\r\n                                        <TestCard test={quest} chooseAnswer={chooseAnswer}/>\r\n\r\n                                    )\r\n                                } )\r\n                            }\r\n                        </div>\r\n                        <button className=\"btn-secondary btn\" onClick={finishTest}>Finish</button>\r\n                    </div>\r\n                </section> : <ResCard questions={questions} result={result}/>\r\n            }\r\n        </>\r\n\r\n\r\n    )\r\n\r\n};\r\n\r\nexport default PassTestCard;"]},"metadata":{},"sourceType":"module"}